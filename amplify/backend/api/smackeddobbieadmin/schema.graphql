type Todo @model @auth(rules: [{allow: groups, groups: ["Admin, Vendors,Dispensaries"], operations: [create, read, update, delete]}]) {
  id: ID!
  name: String!
  description: String
  email: AWSEmail
  priority: Int
}

type Vendor @model @auth(rules: [{allow: owner, operations: [create, read, update, delete]}, {allow: groups, groups: ["Admin, Vendors"]}, {allow: private, operations: [read]}]) {
  id: ID!
  name: String
  username: String @index(name: "vendorUsername")
  email: AWSEmail
  address: String
  address2: String
  state: String
  zip: String
  walletAddress: String
  ETHAddress: String
  SHIBAddress: String
  BTCAddress: String
  licenced: Boolean
  description: String
  filePath: String
  likes: Int
  licenceNumber: Int
  licensePending: Boolean
  linenseType: Int
  licenseNumber: Int
  TIN: Int
  phoneNumber: AWSPhone
  storeAddress: String
  storeState: String
  storeInsured: String
  mobileSeller: Boolean
  planSelected: String
  feedback: String
  doobieCode: Int
  todo: [Todo] @hasMany
  products: [Product] @hasMany
}

type Product @model 
@auth(rules: [{allow: public,operations: [read]}
{ allow: groups, groups: ["Admin, Dispensaries"], operations: [read, create, update, delete] }

] )
{
  id: ID! @primaryKey 
  createdAt: AWSDateTime
  title: String! @index (name: "Product_title_idx")
  Available: Boolean
  category: ProductCategory
  currentInventory: Int!
  image_url: String @index(name: "Imgurl_idx")
  Featured: Boolean
  rating: Float
  price: Float!
  shortDescription: String
  description: String
  effects: Effects
  likes: Int
  Turpines: String
  THC: Float
  CBD: Float
  AmtSold: Int
}

type S3Object {
  bucket: String!
  key: String!
  region: String!
}

type Worker @model @auth(rules: [{allow: owner, operations: [read, update, delete]}, {allow: groups, groups: ["Admin"]}]) {
  id: ID!
  accountActive: Boolean
  name: String
  phone: AWSPhone
  dob: String
  ssn: String
  address: String
  paymentMethod: String
  teams: String
  email: AWSEmail
  walking: Boolean
  capacity: Float
  displayName: String
}

type Order @model @auth(rules: [{allow: owner, operations: [create, read, update, delete]}, {allow: groups, groups: ["Admin"], operations: [delete]}]) {
  id: ID!
  name: [Product] @hasMany
  img: String
  date: AWSDateTime
  user: User @belongsTo
  Status: OrderStatus
  quantity: Int
  OrderTotal: Float
  FilledBy: Vendor 
  productorder: [ProductOrder] @hasMany
}

type ProductOrder @model @auth(rules: [{allow: owner, operations: [create, read, update, delete]}, {allow: groups, groups: ["Admin"]}]) {
  id: ID!
  weight: String
  date: String
  quantity: Int
}

type Cart @model @auth(rules: [{allow: owner, operations: [create, read, update, delete]}, {allow: groups, groups: ["Admin"], operations: [delete]}]) {
  id: ID!
  title: String
  image: String
  price: Float
  amount: Int
}

type User @model @auth(rules: [{allow: owner, operations: [create, read, update, delete]}, {allow: public, operations: [read]}, {allow: groups, groups: ["Admin"]}]) {
  id: ID!
  Email: AWSEmail
  memberSince: AWSDate
  Orders: [Order] @hasMany
  name: String
  productLikes: Int
  Tips: String
  referredBy: Referrals @hasOne
}

type Referrals @model @auth(rules: [{allow: owner, operations: [create, read, update]}, {allow: public, operations: [read]}, {allow: groups, groups: ["Admin"]}]) {
  id: ID
  Email: AWSEmail
  ReferredBy: String
  Amt: Int
  date: AWSDate
  award: String
}

enum OrderStatus {
  RECEIVED
  SUCCESS
  FAILED
  PROCESSING
  DISPATCHED
}

enum ProductWeight {
  SEVENTH
  EIGHT
  ZIP
  HALF
}

enum Effects {
  RELAXING
  ALERT
  EUPHORIC
  HAPPY
  UPLIFTED
  SLEEPY
  HUNGRY
  CREATIVE
  GIGGLY
  FOCUSED
  TINGLY
  ENERGETIC
  TALKATIVE
  AROUSED
}

enum DeliveryStatus {
  RECEIVED
  PROCESSING
  SUCCESS
  FAILED
  INTRANSIT
  DELIVERED
}

enum todoStatus {
  RECEIVED
  PROCESSING
  SUCCESS
  FAIL
  COMPLETED
}

enum messageStatus {
  SENT
  READ
  SUCCESS
  FAIL
  DELETED
}

enum ProductCategory {
  INDICA
  SATIVA
  HYBRID
  OILS
  TINCTURE
  GEAR
  APPAREL
}
 